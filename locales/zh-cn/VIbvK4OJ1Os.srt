1
00:00:00,029 --> 00:00:02,012
欢迎来到第二单元!

2
00:00:02,012 --> 00:00:04,379
我希望大家通过第一单元的学习正在逐渐获得自信

3
00:00:04,379 --> 00:00:08,429
在这一单元及课程的其余部分 我们将要继续学习计算机科学知识

4
00:00:08,429 --> 00:00:12,845
本单元我们的主要目标是建立网络爬虫 不仅仅是在页面 (page) 里找一个链接 (link)

5
00:00:12,845 --> 00:00:14,878
而是找到页面里的所有链接

6
00:00:14,878 --> 00:00:18,163
所以我们可以跟随这些链接在网络上收集到更多的页面

7
00:00:18,163 --> 00:00:21,111
为了做到这些 我们需要学习计算机科学中的两个新的重要概念

8
00:00:21,111 --> 00:00:26,313
第一个是函数 (procedures) 它是一种封装代码的方法 使得我们可以更容易地再次使用它

9
00:00:26,313 --> 00:00:32,929
第二个是控制 (control) 我们需要一种方法去做决定 做重复的事情 去寻找页面上所有的链接

10
00:00:32,929 --> 00:00:38,896
在第一单元结尾中我们所学到的是一种提取第一个 URL 的方法

11
00:00:38,896 --> 00:00:42,063
那非常好 我们可以找到第一个目标了

12
00:00:42,063 --> 00:00:43,829
但是如果我们想要创建一个优秀的爬虫

13
00:00:43,829 --> 00:00:45,313
我们不能仅仅只关心第一个链接

14
00:00:45,313 --> 00:00:47,762
我们应该关注页面上所有的链接

15
00:00:47,762 --> 00:00:49,662
我们需要提取所有的链接

16
00:00:49,662 --> 00:00:51,945
找出这些链接指向何处

17
00:00:51,945 --> 00:00:55,147
这样我们就可以找到更多页面 而不只是第一个

18
00:00:55,147 --> 00:00:58,095
就建立网络浏览器而言 这就是我们这门课的目标

19
00:00:58,095 --> 00:01:01,480
为了达成目标 我们将要学习在计算机科学中的两个很重要的概念

20
00:01:01,480 --> 00:01:03,695
第一个是函数

21
00:01:03,695 --> 00:01:06,579
这是一种封装代码的方法 

22
00:01:06,579 --> 00:01:09,445
我们可以比以往更有效的使用它

23
00:01:09,445 --> 00:01:11,345
第二个是控制

24
00:01:11,345 --> 00:01:14,445
控制结构 (control structures) 将会给我们一个方法去持续

25
00:01:14,445 --> 00:01:16,612
找到页面上所有的连接

26
00:01:16,612 --> 00:01:20,394
所以 我们来回想一下第一单元结尾所学习的代码

27
00:01:20,394 --> 00:01:24,112
我们解决了提取页面上第一个 URL 的问题

28
00:01:24,112 --> 00:01:28,512
我们假设页面被初始化为一些网页的内容

29
00:01:28,512 --> 00:01:31,112
我们把变量 "start_link" 初始化为

30
00:01:31,112 --> 00:01:34,612
调用 page.find 的结果

31
00:01:34,612 --> 00:01:37,796
传入链接标签 (link tag) 的起点

32
00:01:37,796 --> 00:01:40,362
然后 把变量 "start_quote" 初始化为

33
00:01:40,362 --> 00:01:43,545
链接标签后的第一个引号

34
00:01:43,545 --> 00:01:47,211
这是我们在网页中找到的结果

35
00:01:47,211 --> 00:01:49,946
然后我们初始化变量 "end_quote"

36
00:01:49,946 --> 00:01:53,112
为调用 page.find 的结果

37
00:01:53,112 --> 00:01:56,762
去找到 "start_quote" 后的第一个引号

38
00:01:56,762 --> 00:01:58,929
然后 我们赋值变量 "url"

39
00:01:58,929 --> 00:02:01,045
它提取自页面

40
00:02:01,045 --> 00:02:03,396
从 "start_quote" 后的字母

41
00:02:03,396 --> 00:02:06,112
到 "end_quote" 之前的字母

42
00:02:06,112 --> 00:02:08,961
我们可以打印出 URL

43
00:02:08,961 --> 00:02:10,161
这样就能找出页面上的第一个 URL

44
00:02:10,161 --> 00:02:15,029
如果我们想找到第二个 URL

45
00:02:15,029 --> 00:02:17,529
我们可以将上述过程再做一遍

46
00:02:17,529 --> 00:02:20,262
现在我们想更进一步

47
00:02:20,262 --> 00:02:23,629
所以我们只需关注页面的剩余部分

48
00:02:23,629 --> 00:02:26,578
我们可以通过更新变量 "page" 来做到这一点

49
00:02:26,578 --> 00:02:33,329
从 "end_quote" 开始 把剩余页面赋值给变量 "page"

50
00:02:33,329 --> 00:02:36,146
记住 当冒号后有空白时

51
00:02:36,146 --> 00:02:40,046
就意味着从这个位置一直到最后

52
00:02:40,046 --> 00:02:41,778
我们可以再把以上过程再做一次

53
00:02:41,778 --> 00:02:45,731
我们再做一次 "start_link" …

54
00:02:45,731 --> 00:02:55,444
我们再做一次 "start_quote" …

55
00:02:55,444 --> 00:02:58,063
现在我们有了打印出第一个 URL 的代码

56
00:02:58,063 --> 00:03:00,579
继续 更新变量 "page"

57
00:03:00,579 --> 00:03:02,094
然后重复上述过程

58
00:03:02,094 --> 00:03:03,879
打印出第二个 URL

59
00:03:03,879 --> 00:03:05,612
如果我们想要打印出前三个 URL

60
00:03:05,612 --> 00:03:27,563
可以再来一次

61
00:03:27,563 --> 00:03:31,746
现在我们有了可以打印出页面上

62
00:03:31,746 --> 00:03:32,995
前三个 URL 的代码

63
00:03:32,995 --> 00:03:35,029
让我们向上滑动 你有打印出第一个 URL

64
00:03:35,029 --> 00:03:39,829
继续

65
00:03:39,829 --> 00:03:44,445
打印出第二个 URL 继续

66
00:03:44,445 --> 00:03:46,879
这样这个过程就可以无限继续下去

67
00:03:46,879 --> 00:03:49,744
我们为什么发明计算机

68
00:03:49,744 --> 00:03:52,730
就是节省人力 避免做很多枯燥乏味的工作

69
00:03:52,730 --> 00:03:54,812
我们并不希望人们浪费大量时间做这些

70
00:03:54,812 --> 00:03:57,829
当然 一遍又一遍的敲重复的代码

71
00:03:57,829 --> 00:03:59,594
会是很枯燥无味的

72
00:03:59,594 --> 00:04:01,646
甚至做的并不会很好

73
00:04:01,646 --> 00:04:03,695
有些页面有数以百计的链接 (links)

74
00:04:03,695 --> 00:04:07,045
但是有的页面只有一个或两个链接

75
00:04:07,045 --> 00:04:09,711
所以将这些复制上百遍是没有意义的

76
00:04:09,711 --> 00:04:12,045
总有些网页有比我们的复制的程序

77
00:04:12,045 --> 00:04:13,813
有更多的链接数

78
00:04:13,813 --> 00:04:16,777
同时 有些页面比我们的程序数量更少 会给我们带来麻烦

79
00:04:16,777 --> 00:04:20,978
因为我们找不到所有的链接

80
00:04:20,978 --> 00:04:24,979
所以我们今天的目标便是解决这些问题
