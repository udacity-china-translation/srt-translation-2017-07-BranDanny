1
00:00:00,000 --> 00:00:02,609
这是我们熟悉的起点

2
00:00:02,609 --> 00:00:07,199
本地仓库存在于远程仓库后面

3
00:00:07,200 --> 00:00:09,449
现在 假装我们并没有意识到这一点

4
00:00:09,449 --> 00:00:13,859
然后在本地仓库做一次提交

5
00:00:13,859 --> 00:00:15,629
现在我们有了两个仓库

6
00:00:15,630 --> 00:00:21,240
并做了一些相同的提交 但是他们的主分支指向不同

7
00:00:21,239 --> 00:00:24,804
如果我们试着运行git pull命令 并不会起作用

8
00:00:24,804 --> 00:00:27,420
但是我们可以使用git fetch命令

9
00:00:27,420 --> 00:00:30,460
来获取远程仓库的提交 但不会合并到本地

10
00:00:30,460 --> 00:00:33,929
所以如果我们在初始主分支上执行git fetch命令


11
00:00:33,929 --> 00:00:35,579
就会将提交更新至远程仓库

12
00:00:35,579 --> 00:00:40,780
并且初始主分支将会指向它们


13
00:00:40,780 --> 00:00:42,195
当我们在初始主分支上时

14
00:00:42,195 --> 00:00:45,480
我们只能运行git merge命令

15
00:00:45,479 --> 00:00:49,614
来把远程做的修改更新到初始主分支上

16
00:00:49,615 --> 00:00:53,548
现在本地仓库已经做了提交 但是远程仓库没有变化

17
00:00:53,548 --> 00:00:55,119
所以我们需要对这些提交进行推送

18
00:00:55,119 --> 00:01:02,000
在初始主分支执行git push命令将会使本地提交更新至远程仓库

